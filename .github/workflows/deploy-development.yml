name: Docker Image CI - SysSoftIntegra Catalog Development

on:
  push:
    branches: 
      - "test"

jobs:
  build-nextjs-development:
    name: Build Catalog (Next Js)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - environment: test
            service: test-services
  
    environment: ${{ matrix.environment }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Crear archivo .env
        run: |
          cat > .env <<EOL
          APP_BACK_END="${{secrets.APP_BACK_END}}"
          NEXT_PUBLIC_APP_BACK_END="${{secrets.NEXT_PUBLIC_APP_BACK_END}}"
          AUTH_ENABLED="${{secrets.AUTH_ENABLED}}"
          NEXT_PUBLIC_ENV="${{secrets.NEXT_PUBLIC_ENV}}"
          ENV="${{secrets.ENV}}"
          EOL

      - name: Construyendo contenedor NextJs
        run: docker compose -f docker-compose.build.yml build ${{ matrix.service }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1 
      
      - name: Tag catalog image
        run: docker tag ${{ matrix.environment }}-catalog ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/syssoftintegra/catalog-development:${{ matrix.environment }}-latest

      - name: Push catalog image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/syssoftintegra/catalog-development:${{ matrix.environment }}-latest

  deploy-nextjs-development:
    name: Deploy Catalog (Next Js)
    runs-on: webs
    needs: build-nextjs-development

    strategy:
      matrix:
        include:
          - environment: test
            service: test-services

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      NAME_SERVICE: ${{ matrix.environment }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Descargar imagen desde ECR
        run: docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/syssoftintegra/catalog-development:${{ matrix.environment }}-latest

      - name: Crear archivo Compose para ${{ matrix.environment }}
        run: |
          cat <<EOF > docker-compose-${{ matrix.environment }}.yml
          services:
            ${NAME_SERVICE}:
              image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/syssoftintegra/catalog-development:${NAME_SERVICE}-latest
              container_name: ${NAME_SERVICE}-catalog
              restart: always
              networks:
                - luis
          networks:
            luis:
              external: true
          EOF

      - name: Crear y ejecutar contenedor en producción
        run: docker compose -f docker-compose-${{ matrix.environment }}.yml up -d ${{ matrix.environment }}

      - name: Eliminar Compose temporal
        run: rm docker-compose-${{ matrix.environment }}.yml

      - name: Eliminar imágenes locales y builder
        run: docker builder prune --all || true
  

  clean-ecr-images-development:
    name: Borrar imágenes antiguas de ECR
    runs-on: ubuntu-latest
    needs: deploy-nextjs-development

    strategy:
      matrix:
        include:
          - environment: test
            branch: test
    
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Instalar jq
        run: sudo apt-get install -y jq

      - name: Borrar imágenes sin tag '${{ matrix.environment }}-latest' - NextJs
        run: |
          REPO="syssoftintegra/catalog-development"
          ENV="${{ matrix.environment }}"
          TAG="${ENV}-latest"

          aws ecr list-images --repository-name "$REPO" \
            --query "imageIds[?type(imageTag)==null || imageTag!='${TAG}']" \
            --output json > images.json

          COUNT=$(jq length images.json)
          if [ "$COUNT" -gt 0 ]; then
            echo "🗑️ Borrando $COUNT imágenes antiguas..."
            aws ecr batch-delete-image --repository-name "$REPO" --image-ids file://images.json
          else
            echo "✅ No hay imágenes antiguas para borrar en $REPO"
          fi